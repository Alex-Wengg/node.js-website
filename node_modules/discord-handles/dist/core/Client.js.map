{"version":3,"sources":["core/Client.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,uCAAwC;AAKxC,qDAA8C;AAE9C,qDAA8C;AAC9C,uDAAgD;AAMhD;;;;;;;;;;;;;GAaG;AACH,mBAAmC,SAAQ,YAAY;IAQrD,YAAY,MAAc,EAAE,SAAkB,EAAE;QAC9C,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,QAAQ,GAAG,kBAAQ,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,IAAI,IAAI,GAAG,EAAE,CAAC;QAE7C,IAAI,CAAC,QAAQ,GAAG,IAAI,yBAAe,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAClD,IAAI,CAAC,OAAO,GAAG,IAAI,wBAAc,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAEhD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAErC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;QACnG,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;YAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACzF,CAAC;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IACU,MAAM,CAAC,GAAY;;YAC9B,EAAE,CAAC,CACD,GAAG,CAAC,SAAS;gBACb,GAAG,CAAC,MAAM;gBACV,GAAG,CAAC,MAAM,CAAC,GAAG;gBACd,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,EAAE,KAAK,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAC/D,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC;YAEd,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC5C,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACT,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;gBACjC,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC;KAAA;IAgBM,EAAE,CAAC,KAAa,EAAE,QAAkC;QACzD,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACnC,CAAC;CACF;AA9ED,gCA8EC","file":"Client.js","sourcesContent":["import EventEmitter = require('events');\nimport BaseError from '../errors/BaseError';\nimport Validator from '../middleware/Validator';\n\nimport Command from '../structures/Command';\nimport Response from '../structures/Response';\n\nimport CommandHandler from './CommandHandler';\nimport CommandRegistry from './CommandRegistry';\n\nimport { IConfig } from '../interfaces/Config';\n\nimport { Client, Message } from 'discord.js';\n\n/**\n * The starting point for using handles.\n *\n * ```js\n * const discord = require('discord.js');\n * const handles = require('discord-handles');\n *\n * const client = new discord.Client();\n * const handler = new handles.Client();\n *\n * client.on('message', handler.handle);\n * client.login('token');\n * ```\n */\nexport default class HandlesClient extends EventEmitter {\n  public readonly registry: CommandRegistry;\n  public readonly handler: CommandHandler;\n\n  public Response: typeof Response;\n  public argsSuffix?: string;\n  public readonly prefixes: Set<string>;\n\n  constructor(client: Client, config: IConfig = {}) {\n    super();\n\n    this.Response = Response;\n    this.argsSuffix = config.argsSuffix;\n    this.prefixes = config.prefixes || new Set();\n\n    this.registry = new CommandRegistry(this, config);\n    this.handler = new CommandHandler(this, config);\n\n    this.handle = this.handle.bind(this);\n\n    client.once('ready', () => this.prefixes.add(`<@${client.user.id}>`).add(`<@!${client.user.id}>`));\n    if (!('autoListen' in config) || !config.autoListen) client.on('message', this.handle);\n  }\n\n  /**\n   * Handle a message as a command.\n   *\n   * ```js\n   * const client = new discord.Client();\n   * const handler = new handles.Client();\n   *\n   * client.on('message', handler.handle);\n   *\n   * // or\n   *\n   * const client = new discord.Client();\n   * const handler = new handles.Client();\n   *\n   * client.on('message', message => {\n   *   // do other stuff\n   *   handler.handle(message);\n   * });\n   * ```\n   */\n  public async handle(msg: Message) {\n    if (\n      msg.webhookID ||\n      msg.system ||\n      msg.author.bot ||\n      (!msg.client.user.bot && msg.author.id !== msg.client.user.id)\n    ) return null;\n\n    const cmd = await this.handler.resolve(msg);\n    if (!cmd) {\n      this.emit('commandUnknown', msg);\n      return null;\n    }\n\n    return this.handler.exec(cmd);\n  }\n\n  public on(event: 'commandStarted' | 'commandUnknown', listener: (cmd: Command) => void): this;\n\n  public on(event: 'commandError', listener:\n    ({ command, error }: { command: Command, error: Error | BaseError }) => void): this;\n\n  public on(event: 'commandFinished', listener:\n    ({ command, result }: { command: Command, result: any }) => void): this;\n\n  public on(event: 'commandFailed', listener:\n    ({ command, error }: { command: Command, error: BaseError }) => void): this;\n\n  public on(event: 'commandsLoaded', listener:\n    ({ commands, failed, time }: { commands: Map<string, Command>, failed: string[], time: number }) => void): this;\n\n  public on(event: string, listener: (...args: any[]) => void): this {\n    return super.on(event, listener);\n  }\n}\n"],"sourceRoot":"../../src"}