"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const Response_1 = require("../structures/Response");
const CommandHandler_1 = require("./CommandHandler");
const CommandRegistry_1 = require("./CommandRegistry");
/**
 * The starting point for using handles.
 *
 * ```js
 * const discord = require('discord.js');
 * const handles = require('discord-handles');
 *
 * const client = new discord.Client();
 * const handler = new handles.Client();
 *
 * client.on('message', handler.handle);
 * client.login('token');
 * ```
 */
class HandlesClient extends EventEmitter {
    constructor(client, config = {}) {
        super();
        this.Response = Response_1.default;
        this.argsSuffix = config.argsSuffix;
        this.prefixes = config.prefixes || new Set();
        this.registry = new CommandRegistry_1.default(this, config);
        this.handler = new CommandHandler_1.default(this, config);
        this.handle = this.handle.bind(this);
        client.once('ready', () => this.prefixes.add(`<@${client.user.id}>`).add(`<@!${client.user.id}>`));
        if (!('autoListen' in config) || !config.autoListen)
            client.on('message', this.handle);
    }
    /**
     * Handle a message as a command.
     *
     * ```js
     * const client = new discord.Client();
     * const handler = new handles.Client();
     *
     * client.on('message', handler.handle);
     *
     * // or
     *
     * const client = new discord.Client();
     * const handler = new handles.Client();
     *
     * client.on('message', message => {
     *   // do other stuff
     *   handler.handle(message);
     * });
     * ```
     */
    handle(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            if (msg.webhookID ||
                msg.system ||
                msg.author.bot ||
                (!msg.client.user.bot && msg.author.id !== msg.client.user.id))
                return null;
            const cmd = yield this.handler.resolve(msg);
            if (!cmd) {
                this.emit('commandUnknown', msg);
                return null;
            }
            return this.handler.exec(cmd);
        });
    }
    on(event, listener) {
        return super.on(event, listener);
    }
}
exports.default = HandlesClient;

//# sourceMappingURL=Client.js.map
