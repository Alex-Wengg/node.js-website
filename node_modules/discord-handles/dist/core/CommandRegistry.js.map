{"version":3,"sources":["core/CommandRegistry.ts"],"names":[],"mappings":"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","file":"CommandRegistry.js","sourcesContent":["import { promisify } from 'tsubaki';\n\nimport { IConfig } from '../interfaces/Config';\nimport Command, { Trigger } from '../structures/Command';\nimport HandlesClient from './Client';\n\nimport fs = require('fs');\nimport path = require('path');\n\nconst readdir: (dir: string) => Promise<string[]> = promisify(fs.readdir);\nconst stat: (path: string) => Promise<fs.Stats> = promisify(fs.stat);\n\n/**\n * Manage command loading.\n */\nexport default class CommandRegistry extends Map<Trigger, typeof Command> {\n\n  /**\n   * Get all the file paths recursively in a directory.\n   * @param dir The directory to start at.\n   */\n  private static async _loadDir(dir: string): Promise<string[]> {\n    const files = await readdir(dir);\n    const list: string[] = [];\n\n    await Promise.all(files.map(async (f) => {\n      const currentPath = path.join(dir, f);\n      const stats = await stat(currentPath);\n\n      if (stats.isFile() && path.extname(currentPath) === '.js') {\n        list.push(currentPath);\n      } else if (stats.isDirectory()) {\n        const files = await this._loadDir(currentPath);\n        list.push(...files);\n      }\n    }));\n\n    return list;\n  }\n\n  /**\n   * Handles client.\n   */\n  public readonly handles: HandlesClient;\n\n  /**\n   * The directory from which to load commands.\n   */\n  public directory: string;\n\n  constructor(handles: HandlesClient, config: IConfig) {\n    super();\n\n    this.handles = handles;\n    this.directory = config.directory || './commands';\n\n    this.load();\n  }\n\n  /**\n   * Load all commands into memory.  Use when reloading commands.\n   */\n  public async load(): Promise<this> {\n    const start = Date.now();\n\n    this.clear();\n    const files = await CommandRegistry._loadDir(this.directory);\n\n    const failed = [];\n    for (const file of files) {\n      let mod;\n      const location = path.resolve(process.cwd(), file);\n\n      try {\n        delete require.cache[require.resolve(location)];\n        mod = require(location);\n      } catch (e) {\n        failed.push(file);\n        console.error(e); // tslint:disable-line no-console\n        continue;\n      }\n\n      if (typeof mod.default !== 'undefined') mod = mod.default;\n\n      // if triggers are iterable\n      if (Array.isArray(mod.triggers)) {\n        for (const trigger of mod.triggers) this.set(trigger, mod);\n      } else if (typeof mod.triggers === 'undefined') { // if no triggers are provided\n        this.set(path.basename(file, '.js'), mod);\n      } else {\n        this.set(mod.triggers, mod);\n      }\n    }\n\n    this.handles.emit('commandsLoaded', { commands: this, failed, time: Date.now() - start });\n    return this;\n  }\n}\n"],"sourceRoot":"../../src"}