{"version":3,"sources":["middleware/Validator.ts"],"names":[],"mappings":";;AAAA,+DAAwD;AAYxD;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH;IAuBE,YAAY,GAAY;QApBxB;;WAEG;QACI,WAAM,GAAkB,IAAI,CAAC;QAEpC;;WAEG;QACI,YAAO,GAAY,IAAI,CAAC;QAE/B;;WAEG;QACI,UAAK,GAAG,IAAI,CAAC;QAEpB;;WAEG;QACK,SAAI,GAA2C,IAAI,GAAG,EAAE,CAAC;QAG/D,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;IACrB,CAAC;IAED;;;;;;;;OAQG;IACI,KAAK,CAAC,IAAkC,EAAE,SAAwB,IAAI;QAC3E,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,KAAK,UAAU,GAAG,IAAI,GAAG,MAAM,IAAI,EAAE,MAAM,CAAC,CAAC;QACtE,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,IAAI,CACT,QAA8D,EAC9D,QAA+D;QAE/D,MAAM,CAAC,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM;YACvC,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACvC,IAAI,CAAC;oBACH,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAChB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;wBACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;wBACnB,MAAM,IAAI,yBAAe,CAAC,IAAI,CAAC,CAAC;oBAClC,CAAC;gBACH,CAAC;gBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACX,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;wBAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACjD,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACnB,CAAC;YACH,CAAC;YAED,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC9B,CAAC;CACF;AA9DD,4BA8DC","file":"Validator.js","sourcesContent":["import ValidationError from '../errors/ValidationError';\nimport Command from '../structures/Command';\n\n/**\n * ```js\n * validator.apply(cmd => cmd.message.author.id === 'some id', 'uh oh'); // executed at runtime\n * // or\n * validator.apply(cmd.message.author.id === 'some id', 'uh oh'); // executed immediately\n * ```\n */\nexport type ValidationFunction = (v: Validator) => boolean;\n\n/**\n * Passed as a parameter to command validators.  Arguments will not be available in this class,\n * as this is run before arguments are resolved from the command.  Use for permissions checks and\n * other pre-command validations.\n *\n * ```js\n * // Using a custom validator.\n * class CustomValidator extends Validator {\n *   ensureGuild() {\n *     return this.apply(this.command.message.channel.type === 'text', 'Command must be run in a guild channel.');\n *   }\n * }\n *\n * // Usage in command\n * exports.validator = processor => {\n *   return processor.ensureGuild();\n * }\n * ```\n *\n * ```js\n * // Usage without a custom validator\n * exports.validator = (processor, command) => {\n *   return processor.apply(command.message.channel.type === 'text', 'Command must be run in a guild channel.');\n * }\n * ```\n */\nexport default class Validator {\n  public command: Command;\n\n  /**\n   * The reason this validator is invalid.\n   */\n  public reason: string | null = null;\n\n  /**\n   * Whether to automatically respond with reason when invalid.\n   */\n  public respond: boolean = true;\n\n  /**\n   * Whether this validator is valid.\n   */\n  public valid = true;\n\n  /**\n   * Functions to execute when determining validity. Maps validation functions to reasons.\n   */\n  private exec: Map<ValidationFunction, string | null> = new Map();\n\n  constructor(cmd: Command) {\n    this.command = cmd;\n  }\n\n  /**\n   * Test a new boolean for validity.\n   *\n   * ```js\n   * const validator = new Validator();\n   * validator.apply(aCondition, 'borke') || validator.apply(otherCondition, 'different borke');\n   * yield validator;\n   * ```\n   */\n  public apply(test: ValidationFunction | boolean, reason: string | null = null) {\n    this.exec.set(typeof test === 'function' ? test : () => test, reason);\n    return this;\n  }\n\n  public then<TResult1 = void, TResult2 = never>(\n    resolver?: ((value: void) => TResult1 | PromiseLike<TResult1>),\n    rejector?: ((value: Error) => TResult2 | PromiseLike<TResult2>),\n  ): Promise<TResult1 | TResult2> {\n    return new Promise<void>((resolve, reject) => {\n      for (const [test, reason] of this.exec) {\n        try {\n          if (!test(this)) {\n            this.reason = reason;\n            this.valid = false;\n            throw new ValidationError(this);\n          }\n        } catch (e) {\n          if (this.respond) this.command.response.error(e);\n          return reject(e);\n        }\n      }\n\n      return resolve();\n    }).then(resolver, rejector);\n  }\n}\n"],"sourceRoot":"../../src"}