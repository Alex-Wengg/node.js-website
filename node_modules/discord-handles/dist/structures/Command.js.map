{"version":3,"sources":["structures/Command.ts"],"names":[],"mappings":";;AAeA;;;;;;;;;;;;;GAaG;AACH;IAsCE,YAAY,MAAqB,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAmB;QAC5E,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC1D,CAAC;IAED;;OAEG;IACH,IAAI,MAAM;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,IAAI,KAAK;QACP,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,IAAI,OAAO;QACT,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;IAC9B,CAAC;IAED;;OAEG;IACH,IAAI,MAAM;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAC7B,CAAC;IAED,IAAI,MAAM;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACH,IAAI,OAAO;QACT,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC;IAChE,CAAC;IAED;;;;;;;OAOG;IACI,GAAG;QACR,yBAAyB;IAC3B,CAAC;IAED;;OAEG;IACI,IAAI;QACT,yBAAyB;IAC3B,CAAC;IAED;;OAEG;IACI,IAAI;QACT,yBAAyB;IAC3B,CAAC;IAED;;OAEG;IACI,KAAK;QACV,yBAAyB;IAC3B,CAAC;CACF;AAvHD,0BAuHC","file":"Command.js","sourcesContent":["import HandlesClient from '../core/Client';\n\nimport { IConfig } from '../interfaces/Config';\nimport Response, { TextBasedChannel } from './Response';\n\nimport { Client, Guild, GuildMember, Message, User } from 'discord.js';\n\nexport type Trigger = string | RegExp;\n\nexport interface ICommandOptions {\n  trigger: Trigger;\n  message: Message;\n  body: string;\n}\n\n/**\n * A command.\n * ```js\n * const { Command } = require('discord-handles');\n * module.exports = class extends Command {\n *   static get triggers() {\n *     return ['ping', 'pung', 'poing', 'pong'];\n *   }\n *\n *   exec() {\n *     return this.response.success(`${this.trigger} ${Date.now() - this.message.createdTimestamp}ms`);\n *   }\n * };\n */\nexport default class Command {\n  public static triggers?: Trigger | Trigger[];\n\n  /**\n   * The handles client.\n   */\n  public readonly handles: HandlesClient;\n\n  /**\n   * The command trigger that caused the message to run this command.\n   */\n  public readonly trigger: Trigger;\n\n  /**\n   * The message that triggered this command.\n   */\n  public readonly message: Message;\n\n  /**\n   * The body of the command (without prefix or command), as provided in the original message.\n   */\n  public body: string;\n\n  /**\n   * Client config.\n   */\n  public config: IConfig;\n\n  /**\n   * The command arguments as set by arguments in executor.\n   */\n  public args?: any;\n\n  /**\n   * The response object for this command.\n   */\n  public response: Response;\n\n  constructor(client: HandlesClient, { trigger, message, body }: ICommandOptions) {\n    this.handles = client;\n    this.trigger = trigger;\n    this.message = message;\n    this.body = body;\n    this.args = null;\n    this.response = new this.handles.Response(this.message);\n  }\n\n  /**\n   * The Discord.js client.\n   */\n  get client(): Client {\n    return this.message.client;\n  }\n\n  /**\n   * The guild this command is in.\n   */\n  get guild(): Guild {\n    return this.message.guild;\n  }\n\n  /**\n   * The channel this command is in.\n   */\n  get channel(): TextBasedChannel {\n    return this.message.channel;\n  }\n\n  /**\n   * The author of this command.\n   */\n  get author(): User {\n    return this.message.author;\n  }\n\n  get member(): GuildMember {\n    return this.message.member;\n  }\n\n  /**\n   * Ensure unique commands for an author in a channel.\n   * Format: \"authorID:channelID\"\n   */\n  get session() {\n    return `${this.message.author.id}:${this.message.channel.id}`;\n  }\n\n  /**\n   * Executed prior to {@link Command#exec}. Should be used for middleware/validation.\n   * ```js\n   * async pre() {\n   *   await new handles.Argument(this, 'someArgument')\n   *     .setResolver(c => c === 'dank memes' ? 'top kek' : null);\n   * }\n   */\n  public pre() {\n    // implemented by command\n  }\n\n  /**\n   * The command execution method\n   */\n  public exec() {\n    // implemented by command\n  }\n\n  /**\n   * Executed after {@link Command#exec}. Can be used for responses.\n   */\n  public post() {\n    // implemented by command\n  }\n\n  /**\n   * Executed when any of the command execution methods error. Any errors here will be discarded.\n   */\n  public error() {\n    // implemented by command\n  }\n}\n"],"sourceRoot":"../../src"}