{"version":3,"sources":["structures/Response.ts"],"names":[],"mappings":"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","file":"Response.js","sourcesContent":["import Queue from '../util/Queue';\n\nimport { DMChannel, GroupDMChannel, Message, MessageOptions, TextBasedChannel, TextChannel } from 'discord.js';\n\nexport type TextBasedChannel = TextChannel | DMChannel | GroupDMChannel;\n\nexport type SentResponse = Message | Message[];\nexport interface IResponseOptions extends MessageOptions {\n  /**\n   * Whether to catch all rejections when sending.  The promise will always resolve when this option\n   * is enabled; if there is an error, the resolution will be undefined.\n   */\n  catchall?: boolean;\n\n  /**\n   * Whether to send a new message regardless of any prior responses.\n   */\n  force?: boolean;\n}\n\nexport type Send = (\n    data: string | IResponseOptions,\n    options?: IResponseOptions,\n  ) => Promise<SentResponse>;\n\n/**\n * Send responses to a message.\n */\nexport default class Response {\n\n  /**\n   * The message to respond to.\n   */\n  public message: Message;\n\n  /**\n   * Whether to edit previous responses.\n   */\n  public edit: boolean = true;\n\n  /**\n   * The channel to send responses in.\n   */\n  public channel: TextBasedChannel;\n\n  /**\n   * The message to edit, if enabled.\n   */\n  public responseMessage?: Message | null;\n\n  /**\n   * The queue of response jobs.\n   */\n  private readonly _q: Queue;\n\n  /**\n   * @param message The message to respond to.\n   * @param edit Whether to edit previous responses.\n   */\n  constructor(message: Message, edit: boolean = true) {\n    this.message = message;\n    this.channel = message.channel;\n    this.edit = edit;\n    this.responseMessage = null;\n    this._q = new Queue();\n  }\n\n  /**\n   * Send a message using the Discord.js `Message.send` method.  If a prior\n   * response has been sent, it will edit that unless the `force` parameter\n   * is set.  Automatically attempts to fallback to DM responses.  You can\n   * send responses without waiting for prior responses to succeed.\n   * @param data The data to send\n   * @param options Message options.\n   * @param messageOptions Discord.js message options.\n   */\n  public send: Send = (data, options = {}, ...extra: IResponseOptions[]) => {\n    options = Object.assign(options, ...extra);\n    return new Promise((resolve, reject) => {\n      this._q.push(async (): Promise<void> => {\n        function success(m?: SentResponse): void {\n          resolve(m);\n        }\n\n        function error(e: Error): void {\n          if (options.catchall) return success();\n          reject(e);\n        }\n\n        if (this.responseMessage && this.edit && !options.force) {\n          await this.responseMessage.edit(data, options).then(success, error);\n        } else {\n          await this.channel.send(data, options).then((m) => {\n            if (Array.isArray(m)) this.responseMessage = m[0];\n            else this.responseMessage = m;\n            return success(m);\n          }, () => {\n            if (this.channel.type === 'text') {\n              return this.message.author.send(data, options).then(success, error);\n            }\n          });\n        }\n      });\n    });\n  }\n\n  public error: Send = (data, ...options: IResponseOptions[]) => {\n    return this.send(`\\`❌\\` | ${data}`, ...options);\n  }\n\n  public success: Send = (data, ...options: IResponseOptions[]) => {\n    return this.send(`\\`✅\\` | ${data}`, ...options);\n  }\n\n  public dm: Send = async (data, ...options: IResponseOptions[]) => {\n    this.channel = this.message.author.dmChannel || await this.message.author.createDM();\n    return this.send(data, ...options);\n  }\n}\n"],"sourceRoot":"../../src"}